name: CI (Game Tests)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  game-test:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Restore caches
        uses: actions/cache/restore@v4
        id: cache
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Make gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Prepare run GameTest server
        if: steps.cache.outputs.cache-hit != 'true'
        run: ./gradlew prepareGameTestServerRun --no-daemon

      - name: Save caches
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-${{ hashFiles('**/gradle-wrapper.properties') }}

      - name: Run game tests
        id: game_test
        run: |
          set +e
          ./gradlew runGameTestServer --no-daemon > test_output.log 2>&1
          TEST_EXIT_CODE=$?
          cat test_output.log
          exit $TEST_EXIT_CODE

      - name: Parse test results
        if: always()
        id: parse_results
        run: |
          if [ -f test_output.log ]; then
            # 提取测试结果
            TOTAL_TESTS=$(grep -oP '\d+(?= GAME TESTS COMPLETE)' test_output.log | tail -1)
            TIME_TAKEN=$(grep -oP '\d+\.\d+(?= ms =)' test_output.log | tail -1)
            PASSED_TESTS=$(grep -oP 'All \K\d+(?= required tests passed)' test_output.log | tail -1)
            FAILED_TESTS=$(grep -oP '\d+(?= required tests failed)' test_output.log | tail -1 || echo "0")
            
            # 设置默认值
            TOTAL_TESTS=${TOTAL_TESTS:-0}
            TIME_TAKEN=${TIME_TAKEN:-0}
            PASSED_TESTS=${PASSED_TESTS:-0}
            FAILED_TESTS=${FAILED_TESTS:-0}
            
            # 判断测试是否成功
            if [ "$FAILED_TESTS" = "0" ] && [ "$PASSED_TESTS" != "0" ]; then
              TEST_STATUS="✅ Success"
              TEST_COLOR="28a745"
            else
              TEST_STATUS="❌ Failed"
              TEST_COLOR="d73a49"
            fi
            
            echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
            echo "time_taken=$TIME_TAKEN" >> $GITHUB_OUTPUT
            echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT
            echo "failed_tests=$FAILED_TESTS" >> $GITHUB_OUTPUT
            echo "test_status=$TEST_STATUS" >> $GITHUB_OUTPUT
            echo "test_color=$TEST_COLOR" >> $GITHUB_OUTPUT
            
            echo "📊 Test Results:"
            echo "  Total: $TOTAL_TESTS"
            echo "  Passed: $PASSED_TESTS"
            echo "  Failed: $FAILED_TESTS"
            echo "  Time: $TIME_TAKEN ms"
          else
            echo "❌ Test output file not found"
            echo "test_status=❌ No Results" >> $GITHUB_OUTPUT
            echo "total_tests=0" >> $GITHUB_OUTPUT
            echo "passed_tests=0" >> $GITHUB_OUTPUT
            echo "failed_tests=0" >> $GITHUB_OUTPUT
            echo "time_taken=0" >> $GITHUB_OUTPUT
          fi

      - name: Comment PR with test results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ steps.parse_results.outputs.test_status }}';
            const totalTests = '${{ steps.parse_results.outputs.total_tests }}';
            const passedTests = '${{ steps.parse_results.outputs.passed_tests }}';
            const failedTests = '${{ steps.parse_results.outputs.failed_tests }}';
            const timeTaken = '${{ steps.parse_results.outputs.time_taken }}';
            
            const comment = `## 🎮 Game Test Results
            
            ${testStatus}
            
            | Metric | Value |
            |--------|-------|
            | **Total Tests** | ${totalTests} |
            | **Passed** | ✅ ${passedTests} |
            | **Failed** | ${failedTests > 0 ? '❌' : '✅'} ${failedTests} |
            | **Duration** | ⏱️ ${timeTaken} ms |
            
            ---
            *Workflow run: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;
            
            // 查找之前的评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🎮 Game Test Results')
            );
            
            // 如果存在则更新，否则创建新评论
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: game-test-logs
          path: test_output.log
          retention-days: 30

      - name: Create Job Summary
        if: always()
        run: |
          echo "## 🎮 Game Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.parse_results.outputs.test_status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Tests** | ${{ steps.parse_results.outputs.total_tests }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Passed** | ✅ ${{ steps.parse_results.outputs.passed_tests }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Failed** | ${{ steps.parse_results.outputs.failed_tests > 0 && '❌' || '✅' }} ${{ steps.parse_results.outputs.failed_tests }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Duration** | ⏱️ ${{ steps.parse_results.outputs.time_taken }} ms |" >> $GITHUB_STEP_SUMMARY
